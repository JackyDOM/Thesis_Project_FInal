from flask import Flask, render_template, request
from flask_sqlalchemy import SQLAlchemy
from flask_restx import Api, Resource, fields, Namespace

# Initialize Flask app
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///db.sqlite'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Initialize SQLAlchemy
db = SQLAlchemy(app)

# Initialize Flask-RESTX API
api = Api(app, version='1.0', title='My API', description='A simple API', doc='/swagger/')

# Define the User model
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    genre = db.Column(db.String(50), nullable=False)
    dob = db.Column(db.String(50), nullable=False)
    personality = db.Column(db.String(100), nullable=False)
    job = db.Column(db.String(100), nullable=False)
    description = db.Column(db.String(500), nullable=False)

    def __init__(self, name, age, genre, dob, personality, job, description):
        self.name = name
        self.age = age
        self.genre = genre
        self.dob = dob
        self.personality = personality
        self.job = job
        self.description = description

# Create a namespace for User Information
user_ns = Namespace('User_Information', description='Operations related to user information')
api.add_namespace(user_ns)

# Define the user model for Swagger UI input validation
user_input_model = user_ns.model('User', {
    'name': fields.String(required=True, description='Name of the user'),
    'age': fields.Integer(required=True, description='Age of the user'),
    'genre': fields.String(required=True, description='Genre of the user'),
    'dob': fields.String(required=True, description='Date of birth'),
    'personality': fields.String(required=True, description='Personality description'),
    'job': fields.String(required=True, description='Job description'),
    'description': fields.String(required=True, description='Short description of the user')
})

# User Resource for POST (create user)
@user_ns.route('/user')
class UserResource(Resource):
    @user_ns.expect(user_input_model)
    @user_ns.doc('create_user')
    def post(self):
        """Create new user information"""
        data = request.get_json()
        
        # Check if user with the same name already exists
        if User.query.filter_by(name=data['name']).first():
            return {'message': f'User with name {data["name"]} already exists'}, 400
        
        # Create and save the new user
        user = User(
            name=data['name'],
            age=data['age'],
            genre=data['genre'],
            dob=data['dob'],
            personality=data['personality'],
            job=data['job'],
            description=data['description']
        )
        db.session.add(user)
        db.session.commit()
        
        return {'message': f'User {user.name} created successfully'}, 201

# User Resource by ID for GET, PUT, DELETE
@user_ns.route('/user/<int:user_id>')
class UserResourceById(Resource):
    def get(self, user_id):
        """Retrieve user information"""
        user = User.query.get(user_id)
        if not user:
            return {'message': f'User with ID {user_id} not found'}, 404
        return {
            'id': user.id,
            'name': user.name,
            'age': user.age,
            'genre': user.genre,
            'dob': user.dob,
            'personality': user.personality,
            'job': user.job,
            'description': user.description
        }, 200

    @user_ns.expect(user_input_model)
    def put(self, user_id):
        """Update existing user information"""
        user = User.query.get(user_id)
        if not user:
            return {'message': f'User with ID {user_id} not found'}, 404
        data = request.get_json()
        user.name = data['name']
        user.age = data['age']
        user.genre = data['genre']
        user.dob = data['dob']
        user.personality = data['personality']
        user.job = data['job']
        user.description = data['description']
        db.session.commit()
        return {'message': f'User {user_id} updated successfully'}, 200

    def delete(self, user_id):
        """Delete user information"""
        user = User.query.get(user_id)
        if not user:
            return {'message': f'User with ID {user_id} not found'}, 404
        db.session.delete(user)
        db.session.commit()
        return {'message': f'User {user_id} deleted successfully'}, 200

# User List Resource for GET (all users)
@user_ns.route('/users')
class UserList(Resource):
    def get(self):
        """Retrieve all user information"""
        users = User.query.all()
        if not users:
            return {'message': 'No users found', 'code': 404}, 404

        users_list = []
        for user in users:
            users_list.append({
                'id': user.id,
                'name': user.name,
                'age': user.age,
                'genre': user.genre,
                'dob': user.dob,
                'personality': user.personality,
                'job': user.job,
                'description': user.description
            })
        
        response = {
            'message': 'All user information retrieved successfully',
            'code': 200,
            'data': users_list
        }
        return response, 200

# Dashboard route
@app.route('/dashboard')
def dashboard():
    return render_template('layout.html')

# Initialize the database
with app.app_context():
    db.create_all()

if __name__ == '__main__':
    app.run(debug=True)


# @app.route("/delete_uploaded", methods=["POST"])
# def delete_uploaded():
#     try:
#         file_path = request.form.get("file_path")
#         if file_path and os.path.exists(file_path):
#             os.remove(file_path)
#             return render_template("upload.html", message="File deleted successfully")
#         else:
#             return render_template("upload.html", error="File not found")
#     except Exception as e:
#         return render_template("upload.html", error=f"Error deleting file: {str(e)}")

# @app.route("/serve_uploaded_file/<path:file_path>")
# def serve_uploaded_file(file_path):
#     full_path = os.path.join(UPLOAD_FOLDER, file_path)
#     if os.path.exists(full_path):
#         return send_file(full_path, as_attachment=False)  # Opens in browser if supported, or downloads
#     else:
#         return render_template("upload.html", error="File not found")
    

# for verify data when user submit the file xlsx
# @app.route("/verify")
# def verify():
#     return render_template("verifyResult.html")
